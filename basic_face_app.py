#!/usr/bin/env python3
"""
·ª®ng d·ª•ng nh·∫≠n di·ªán khu√¥n m·∫∑t c∆° b·∫£n - ch·ªâ c·∫ßn OpenCV
"""

import cv2
import os
from datetime import datetime

def main():
    print("üéØ ·ª®ng d·ª•ng Nh·∫≠n di·ªán Khu√¥n m·∫∑t C∆° b·∫£n")
    print("=" * 50)
    
    # Ki·ªÉm tra OpenCV
    try:
        print(f"OpenCV version: {cv2.__version__}")
    except:
        print("‚ùå OpenCV ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!")
        print("Ch·∫°y: py -m pip install opencv-python")
        return
    
    # Load face detector
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    
    if face_cascade.empty():
        print("‚ùå Kh√¥ng th·ªÉ load face detector!")
        return
    
    print("‚úÖ Face detector ƒë√£ s·∫µn s√†ng!")
    
    while True:
        print("\nüìã Ch·ªçn ch·∫ø ƒë·ªô:")
        print("1. üìπ Camera tr·ª±c ti·∫øp")
        print("2. üì∑ Ph√¢n t√≠ch ·∫£nh")
        print("3. ‚ùå Tho√°t")
        
        choice = input("\nüëâ Nh·∫≠p l·ª±a ch·ªçn (1-3): ").strip()
        
        if choice == '1':
            camera_mode(face_cascade)
        elif choice == '2':
            image_mode(face_cascade)
        elif choice == '3':
            print("üëã T·∫°m bi·ªát!")
            break
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

def camera_mode(face_cascade):
    """Ch·∫ø ƒë·ªô camera tr·ª±c ti·∫øp"""
    print("\nüìπ Kh·ªüi ƒë·ªông camera...")
    
    cap = cv2.VideoCapture(0)
    
    if not cap.isOpened():
        print("‚ùå Kh√¥ng th·ªÉ m·ªü camera!")
        return
    
    print("‚úÖ Camera ƒë√£ s·∫µn s√†ng!")
    print("üí° Nh·∫•n 'q' ƒë·ªÉ tho√°t, 's' ƒë·ªÉ ch·ª•p ·∫£nh")
    
    while True:
        ret, frame = cap.read()
        if not ret:
            print("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc frame!")
            break
        
        # Ph√°t hi·ªán khu√¥n m·∫∑t
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, 1.1, 5, minSize=(50, 50))
        
        # V·∫Ω khung khu√¥n m·∫∑t
        for (x, y, w, h) in faces:
            cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
            cv2.putText(frame, 'Face Detected', (x, y-10), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
        
        # Hi·ªÉn th·ªã th√¥ng tin
        info = f"Faces: {len(faces)}"
        cv2.putText(frame, info, (10, 30), 
                   cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
        
        cv2.putText(frame, "Press 'q' to quit, 's' to save", (10, frame.shape[0] - 10), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
        
        # Hi·ªÉn th·ªã frame
        cv2.imshow('Face Detection', frame)
        
        # X·ª≠ l√Ω ph√≠m
        key = cv2.waitKey(1) & 0xFF
        if key == ord('q'):
            break
        elif key == ord('s'):
            # L∆∞u ·∫£nh
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"capture_{timestamp}.jpg"
            cv2.imwrite(filename, frame)
            print(f"üì∏ ƒê√£ l∆∞u ·∫£nh: {filename}")
    
    cap.release()
    cv2.destroyAllWindows()

def image_mode(face_cascade):
    """Ch·∫ø ƒë·ªô ph√¢n t√≠ch ·∫£nh"""
    image_path = input("\nüì∑ Nh·∫≠p ƒë∆∞·ªùng d·∫´n ·∫£nh: ").strip()
    
    if not os.path.exists(image_path):
        print("‚ùå File kh√¥ng t·ªìn t·∫°i!")
        return
    
    # ƒê·ªçc ·∫£nh
    image = cv2.imread(image_path)
    if image is None:
        print("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh!")
        return
    
    print("üîÑ ƒêang ph√¢n t√≠ch...")
    
    # Ph√°t hi·ªán khu√¥n m·∫∑t
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, 1.1, 5, minSize=(50, 50))
    
    # V·∫Ω k·∫øt qu·∫£
    for (x, y, w, h) in faces:
        cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 2)
        cv2.putText(image, 'Face', (x, y-10), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    print(f"\n‚úÖ Ph√°t hi·ªán {len(faces)} khu√¥n m·∫∑t!")
    
    # Hi·ªÉn th·ªã ·∫£nh
    cv2.imshow('Result', image)
    print("\nüí° Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...")
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    
    # L∆∞u k·∫øt qu·∫£
    save = input("üíæ L∆∞u k·∫øt qu·∫£? (y/n): ").strip().lower()
    if save == 'y':
        output_path = f"result_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
        cv2.imwrite(output_path, image)
        print(f"‚úÖ ƒê√£ l∆∞u: {output_path}")

if __name__ == "__main__":
    main()
