import cv2
import numpy as np
import os
from datetime import datetime

class OpenCVFaceAgeDetector:
    def __init__(self):
        """Kh·ªüi t·∫°o detector v·ªõi OpenCV"""
        # Load Haar Cascade cho ph√°t hi·ªán khu√¥n m·∫∑t
        self.face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
        
        # C√°c nh√≥m tu·ªïi
        self.age_groups = {
            0: 'Tr·∫ª em (0-12)',
            1: 'Thi·∫øu ni√™n (13-19)', 
            2: 'Thanh ni√™n (20-35)',
            3: 'Trung ni√™n (36-55)',
            4: 'Cao tu·ªïi (56+)'
        }
        
        # M√†u s·∫Øc cho c√°c nh√≥m tu·ªïi
        self.age_colors = {
            0: (255, 0, 255),    # Magenta - Tr·∫ª em
            1: (0, 255, 255),    # Cyan - Thi·∫øu ni√™n
            2: (0, 255, 0),      # Green - Thanh ni√™n
            3: (255, 255, 0),    # Yellow - Trung ni√™n
            4: (0, 0, 255)       # Red - Cao tu·ªïi
        }
    
    def detect_faces(self, frame):
        """Ph√°t hi·ªán khu√¥n m·∫∑t trong frame"""
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = self.face_cascade.detectMultiScale(
            gray,
            scaleFactor=1.1,
            minNeighbors=5,
            minSize=(50, 50),
            flags=cv2.CASCADE_SCALE_IMAGE
        )
        return faces
    
    def analyze_face_features(self, face_region):
        """Ph√¢n t√≠ch ƒë·∫∑c tr∆∞ng khu√¥n m·∫∑t ƒë·ªÉ ∆∞·ªõc t√≠nh tu·ªïi"""
        gray_face = cv2.cvtColor(face_region, cv2.COLOR_BGR2GRAY)
        h, w = gray_face.shape
        
        # 1. Ph√¢n t√≠ch texture (ƒë·ªô nh√°m da)
        laplacian = cv2.Laplacian(gray_face, cv2.CV_64F)
        texture_variance = laplacian.var()
        
        # 2. Ph√¢n t√≠ch ƒë·ªô t∆∞∆°ng ph·∫£n
        contrast = gray_face.std()
        
        # 3. Ph√¢n t√≠ch histogram
        hist = cv2.calcHist([gray_face], [0], None, [256], [0, 256])
        hist_mean = np.mean(hist)
        
        # 4. Ph√¢n t√≠ch c·∫°nh (wrinkles)
        edges = cv2.Canny(gray_face, 50, 150)
        edge_density = np.sum(edges > 0) / (h * w)
        
        # 5. Ph√¢n t√≠ch k√≠ch th∆∞·ªõc t∆∞∆°ng ƒë·ªëi
        face_area = h * w
        
        return {
            'texture_variance': texture_variance,
            'contrast': contrast,
            'hist_mean': hist_mean,
            'edge_density': edge_density,
            'face_area': face_area,
            'width': w,
            'height': h
        }
    
    def estimate_age_group(self, features):
        """∆Ø·ªõc t√≠nh nh√≥m tu·ªïi d·ª±a tr√™n ƒë·∫∑c tr∆∞ng"""
        score = 0
        
        # Texture analysis (da m·ªãn = tr·∫ª, da nhƒÉn = gi√†)
        if features['texture_variance'] > 500:
            score += 2  # Da m·ªãn
        elif features['texture_variance'] > 200:
            score += 1
        else:
            score -= 1  # Da nhƒÉn
        
        # Contrast analysis
        if features['contrast'] > 60:
            score += 1  # T∆∞∆°ng ph·∫£n cao = tr·∫ª
        elif features['contrast'] < 30:
            score -= 1
        
        # Edge density (nhi·ªÅu n·∫øp nhƒÉn = gi√†)
        if features['edge_density'] < 0.1:
            score += 1  # √çt n·∫øp nhƒÉn
        elif features['edge_density'] > 0.2:
            score -= 1  # Nhi·ªÅu n·∫øp nhƒÉn
        
        # Face size (khu√¥n m·∫∑t l·ªõn th∆∞·ªùng l√† ng∆∞·ªùi l·ªõn)
        if features['face_area'] < 5000:
            score += 2  # Khu√¥n m·∫∑t nh·ªè = tr·∫ª em
        elif features['face_area'] > 15000:
            score -= 1  # Khu√¥n m·∫∑t l·ªõn = ng∆∞·ªùi l·ªõn
        
        # Histogram analysis
        if features['hist_mean'] > 100:
            score += 1  # Da s√°ng = tr·∫ª
        
        # Quy·∫øt ƒë·ªãnh nh√≥m tu·ªïi
        if score >= 4:
            return 0  # Tr·∫ª em
        elif score >= 2:
            return 1  # Thi·∫øu ni√™n
        elif score >= 0:
            return 2  # Thanh ni√™n
        elif score >= -2:
            return 3  # Trung ni√™n
        else:
            return 4  # Cao tu·ªïi
    
    def process_frame(self, frame):
        """X·ª≠ l√Ω frame: ph√°t hi·ªán khu√¥n m·∫∑t v√† ∆∞·ªõc t√≠nh tu·ªïi"""
        faces = self.detect_faces(frame)
        results = []
        
        for (x, y, w, h) in faces:
            # C·∫Øt v√πng khu√¥n m·∫∑t
            face_region = frame[y:y+h, x:x+w]
            
            # Ph√¢n t√≠ch ƒë·∫∑c tr∆∞ng
            features = self.analyze_face_features(face_region)
            
            # ∆Ø·ªõc t√≠nh nh√≥m tu·ªïi
            age_group_id = self.estimate_age_group(features)
            age_group_name = self.age_groups[age_group_id]
            color = self.age_colors[age_group_id]
            
            # V·∫Ω bounding box v·ªõi m√†u t∆∞∆°ng ·ª©ng
            cv2.rectangle(frame, (x, y), (x+w, y+h), color, 2)
            
            # V·∫Ω nh√£n tu·ªïi
            label = age_group_name
            label_size = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.6, 2)[0]
            
            # V·∫Ω background cho text
            cv2.rectangle(frame, (x, y-30), (x + label_size[0], y), color, -1)
            cv2.putText(frame, label, (x, y-10), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
            
            # Th√™m th√¥ng tin chi ti·∫øt
            info_text = f"Texture: {features['texture_variance']:.0f}"
            cv2.putText(frame, info_text, (x, y+h+20), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.4, color, 1)
            
            results.append({
                'bbox': (x, y, w, h),
                'age_group': age_group_name,
                'age_id': age_group_id,
                'features': features
            })
        
        return frame, results

def main():
    print("üéØ ·ª®ng d·ª•ng Nh·∫≠n di·ªán Khu√¥n m·∫∑t v√† ∆Ø·ªõc t√≠nh ƒê·ªô tu·ªïi")
    print("=" * 50)
    
    # Kh·ªüi t·∫°o detector
    detector = OpenCVFaceAgeDetector()
    
    while True:
        print("\nüìã Ch·ªçn ch·∫ø ƒë·ªô:")
        print("1. üìπ Camera tr·ª±c ti·∫øp")
        print("2. üì∑ Ph√¢n t√≠ch ·∫£nh")
        print("3. üìÅ Ph√¢n t√≠ch th∆∞ m·ª•c ·∫£nh")
        print("4. ‚ùå Tho√°t")
        
        choice = input("\nüëâ Nh·∫≠p l·ª±a ch·ªçn (1-4): ").strip()
        
        if choice == '1':
            # Camera tr·ª±c ti·∫øp
            print("\nüìπ Kh·ªüi ƒë·ªông camera...")
            cap = cv2.VideoCapture(0)
            
            if not cap.isOpened():
                print("‚ùå Kh√¥ng th·ªÉ m·ªü camera!")
                continue
            
            print("‚úÖ Camera ƒë√£ s·∫µn s√†ng!")
            print("üí° Nh·∫•n 'q' ƒë·ªÉ tho√°t, 's' ƒë·ªÉ ch·ª•p ·∫£nh")
            
            while True:
                ret, frame = cap.read()
                if not ret:
                    print("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc frame!")
                    break
                
                # X·ª≠ l√Ω frame
                processed_frame, results = detector.process_frame(frame.copy())
                
                # Hi·ªÉn th·ªã th√¥ng tin
                info_text = f"Faces: {len(results)}"
                cv2.putText(processed_frame, info_text, (10, 30), 
                           cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
                
                # Hi·ªÉn th·ªã frame
                cv2.imshow('Face Age Detection', processed_frame)
                
                # X·ª≠ l√Ω ph√≠m
                key = cv2.waitKey(1) & 0xFF
                if key == ord('q'):
                    break
                elif key == ord('s'):
                    # L∆∞u ·∫£nh
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"capture_{timestamp}.jpg"
                    cv2.imwrite(filename, processed_frame)
                    print(f"üì∏ ƒê√£ l∆∞u ·∫£nh: {filename}")
            
            cap.release()
            cv2.destroyAllWindows()
        
        elif choice == '2':
            # Ph√¢n t√≠ch ·∫£nh ƒë∆°n l·∫ª
            image_path = input("\nüì∑ Nh·∫≠p ƒë∆∞·ªùng d·∫´n ·∫£nh: ").strip()
            
            if not os.path.exists(image_path):
                print("‚ùå File kh√¥ng t·ªìn t·∫°i!")
                continue
            
            # ƒê·ªçc ·∫£nh
            image = cv2.imread(image_path)
            if image is None:
                print("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh!")
                continue
            
            print("üîÑ ƒêang ph√¢n t√≠ch...")
            
            # X·ª≠ l√Ω ·∫£nh
            processed_image, results = detector.process_frame(image.copy())
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            print(f"\n‚úÖ Ph√°t hi·ªán {len(results)} khu√¥n m·∫∑t:")
            for i, result in enumerate(results):
                print(f"üë§ Ng∆∞·ªùi {i+1}: {result['age_group']}")
                features = result['features']
                print(f"   - Texture: {features['texture_variance']:.0f}")
                print(f"   - Contrast: {features['contrast']:.1f}")
                print(f"   - Size: {features['width']}x{features['height']}")
            
            # Hi·ªÉn th·ªã ·∫£nh
            cv2.imshow('Result', processed_image)
            print("\nüí° Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...")
            cv2.waitKey(0)
            cv2.destroyAllWindows()
            
            # L∆∞u k·∫øt qu·∫£
            save = input("üíæ L∆∞u k·∫øt qu·∫£? (y/n): ").strip().lower()
            if save == 'y':
                output_path = f"result_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
                cv2.imwrite(output_path, processed_image)
                print(f"‚úÖ ƒê√£ l∆∞u: {output_path}")
        
        elif choice == '3':
            # Ph√¢n t√≠ch th∆∞ m·ª•c
            folder_path = input("\nüìÅ Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c: ").strip()
            
            if not os.path.exists(folder_path):
                print("‚ùå Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i!")
                continue
            
            # T√¨m c√°c file ·∫£nh
            image_extensions = ['.jpg', '.jpeg', '.png', '.bmp']
            image_files = []
            
            for file in os.listdir(folder_path):
                if any(file.lower().endswith(ext) for ext in image_extensions):
                    image_files.append(os.path.join(folder_path, file))
            
            if not image_files:
                print("‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o!")
                continue
            
            print(f"üìä T√¨m th·∫•y {len(image_files)} ·∫£nh")
            
            # T·∫°o th∆∞ m·ª•c k·∫øt qu·∫£
            output_dir = f"results_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            os.makedirs(output_dir, exist_ok=True)
            
            # X·ª≠ l√Ω t·ª´ng ·∫£nh
            total_faces = 0
            age_stats = {group: 0 for group in detector.age_groups.values()}
            
            for i, image_path in enumerate(image_files):
                print(f"üîÑ X·ª≠ l√Ω {i+1}/{len(image_files)}: {os.path.basename(image_path)}")
                
                image = cv2.imread(image_path)
                if image is None:
                    continue
                
                processed_image, results = detector.process_frame(image.copy())
                
                # L∆∞u k·∫øt qu·∫£
                output_path = os.path.join(output_dir, f"result_{os.path.basename(image_path)}")
                cv2.imwrite(output_path, processed_image)
                
                # Th·ªëng k√™
                total_faces += len(results)
                for result in results:
                    age_stats[result['age_group']] += 1
            
            # Hi·ªÉn th·ªã th·ªëng k√™
            print(f"\nüìä Th·ªëng k√™ t·ªïng quan:")
            print(f"üì∑ T·ªïng s·ªë ·∫£nh: {len(image_files)}")
            print(f"üë• T·ªïng s·ªë khu√¥n m·∫∑t: {total_faces}")
            print(f"üìÅ K·∫øt qu·∫£ l∆∞u t·∫°i: {output_dir}")
            
            print(f"\nüéÇ Ph√¢n b·ªë ƒë·ªô tu·ªïi:")
            for age_group, count in age_stats.items():
                if count > 0:
                    percentage = (count / total_faces) * 100 if total_faces > 0 else 0
                    print(f"   {age_group}: {count} ng∆∞·ªùi ({percentage:.1f}%)")
        
        elif choice == '4':
            print("üëã T·∫°m bi·ªát!")
            break
        
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

if __name__ == "__main__":
    main()
