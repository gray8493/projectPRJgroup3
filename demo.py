#!/usr/bin/env python3
"""
Demo script ƒë·ªÉ test nhanh ·ª©ng d·ª•ng nh·∫≠n di·ªán khu√¥n m·∫∑t v√† ∆∞·ªõc t√≠nh tu·ªïi
"""

import cv2
import sys
import os

def test_opencv():
    """Test OpenCV installation"""
    print("üîç Ki·ªÉm tra OpenCV...")
    try:
        print(f"‚úÖ OpenCV version: {cv2.__version__}")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói OpenCV: {e}")
        return False

def test_camera():
    """Test camera access"""
    print("\nüìπ Ki·ªÉm tra camera...")
    try:
        cap = cv2.VideoCapture(0)
        if cap.isOpened():
            ret, frame = cap.read()
            if ret:
                print("‚úÖ Camera ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng")
                print(f"üìè ƒê·ªô ph√¢n gi·∫£i: {frame.shape[1]}x{frame.shape[0]}")
                cap.release()
                return True
            else:
                print("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc frame t·ª´ camera")
                cap.release()
                return False
        else:
            print("‚ùå Kh√¥ng th·ªÉ m·ªü camera")
            return False
    except Exception as e:
        print(f"‚ùå L·ªói camera: {e}")
        return False

def test_face_detection():
    """Test face detection"""
    print("\nüë§ Ki·ªÉm tra ph√°t hi·ªán khu√¥n m·∫∑t...")
    try:
        # Load Haar Cascade
        face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
        
        if face_cascade.empty():
            print("‚ùå Kh√¥ng th·ªÉ load Haar Cascade")
            return False
        
        print("‚úÖ Haar Cascade loaded th√†nh c√¥ng")
        
        # Test v·ªõi camera
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            print("‚ùå Kh√¥ng th·ªÉ m·ªü camera ƒë·ªÉ test")
            return False
        
        print("üì∏ ƒêang test ph√°t hi·ªán khu√¥n m·∫∑t (5 gi√¢y)...")
        print("üí° H√£y nh√¨n v√†o camera!")
        
        face_detected = False
        for i in range(50):  # Test trong 5 gi√¢y (50 frames)
            ret, frame = cap.read()
            if not ret:
                continue
            
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            faces = face_cascade.detectMultiScale(gray, 1.1, 5)
            
            if len(faces) > 0:
                face_detected = True
                print(f"‚úÖ Ph√°t hi·ªán {len(faces)} khu√¥n m·∫∑t!")
                break
            
            # Hi·ªÉn th·ªã frame
            cv2.imshow('Face Detection Test', frame)
            if cv2.waitKey(100) & 0xFF == ord('q'):
                break
        
        cap.release()
        cv2.destroyAllWindows()
        
        if face_detected:
            print("‚úÖ Test ph√°t hi·ªán khu√¥n m·∫∑t th√†nh c√¥ng!")
            return True
        else:
            print("‚ö†Ô∏è Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t (c√≥ th·ªÉ do √°nh s√°ng ho·∫∑c g√≥c camera)")
            return True  # V·∫´n coi l√† pass v√¨ c√≥ th·ªÉ do ƒëi·ªÅu ki·ªán test
            
    except Exception as e:
        print(f"‚ùå L·ªói test face detection: {e}")
        return False

def quick_demo():
    """Ch·∫°y demo nhanh"""
    print("\nüöÄ Demo nhanh - Nh·∫•n 'q' ƒë·ªÉ tho√°t")
    
    try:
        # Kh·ªüi t·∫°o
        cap = cv2.VideoCapture(0)
        face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
        
        # M√†u s·∫Øc cho c√°c nh√≥m tu·ªïi (gi·∫£ ƒë·ªãnh)
        colors = [(255, 0, 255), (0, 255, 255), (0, 255, 0), (255, 255, 0), (0, 0, 255)]
        age_groups = ['Tr·∫ª em', 'Thi·∫øu ni√™n', 'Thanh ni√™n', 'Trung ni√™n', 'Cao tu·ªïi']
        
        frame_count = 0
        
        while True:
            ret, frame = cap.read()
            if not ret:
                break
            
            # Ph√°t hi·ªán khu√¥n m·∫∑t
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            faces = face_cascade.detectMultiScale(gray, 1.1, 5, minSize=(50, 50))
            
            # V·∫Ω k·∫øt qu·∫£
            for i, (x, y, w, h) in enumerate(faces):
                # Ch·ªçn m√†u v√† nh√≥m tu·ªïi ng·∫´u nhi√™n cho demo
                color_idx = (frame_count // 30 + i) % len(colors)
                color = colors[color_idx]
                age_group = age_groups[color_idx]
                
                # V·∫Ω bounding box
                cv2.rectangle(frame, (x, y), (x+w, y+h), color, 2)
                
                # V·∫Ω nh√£n
                label = f"{age_group} (Demo)"
                cv2.putText(frame, label, (x, y-10), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)
            
            # Th√¥ng tin
            info = f"Faces: {len(faces)} | Frame: {frame_count}"
            cv2.putText(frame, info, (10, 30), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            
            cv2.putText(frame, "Press 'q' to quit", (10, frame.shape[0] - 10), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
            
            # Hi·ªÉn th·ªã
            cv2.imshow('Face Age Detection Demo', frame)
            
            # Ki·ªÉm tra ph√≠m
            key = cv2.waitKey(1) & 0xFF
            if key == ord('q'):
                break
            
            frame_count += 1
        
        cap.release()
        cv2.destroyAllWindows()
        print("‚úÖ Demo ho√†n th√†nh!")
        
    except Exception as e:
        print(f"‚ùå L·ªói demo: {e}")

def main():
    print("üéØ DEMO - ·ª®ng d·ª•ng Nh·∫≠n di·ªán Khu√¥n m·∫∑t v√† ∆Ø·ªõc t√≠nh ƒê·ªô tu·ªïi")
    print("=" * 60)
    
    # Ki·ªÉm tra h·ªá th·ªëng
    opencv_ok = test_opencv()
    camera_ok = test_camera()
    face_detection_ok = test_face_detection()
    
    print("\nüìä K·∫æT QU·∫¢ KI·ªÇM TRA:")
    print(f"OpenCV: {'‚úÖ' if opencv_ok else '‚ùå'}")
    print(f"Camera: {'‚úÖ' if camera_ok else '‚ùå'}")
    print(f"Face Detection: {'‚úÖ' if face_detection_ok else '‚ùå'}")
    
    if opencv_ok and camera_ok:
        print("\nüéÆ Ch·ªçn h√†nh ƒë·ªông:")
        print("1. üöÄ Ch·∫°y demo nhanh")
        print("2. üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
        print("3. ‚ùå Tho√°t")
        
        choice = input("\nüëâ Nh·∫≠p l·ª±a ch·ªçn (1-3): ").strip()
        
        if choice == '1':
            quick_demo()
        elif choice == '2':
            print("\nüìã H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:")
            print("1. Ch·∫°y ·ª©ng d·ª•ng Streamlit:")
            print("   streamlit run simple_face_age_app.py")
            print("\n2. Ch·∫°y ·ª©ng d·ª•ng console:")
            print("   python opencv_face_age.py")
            print("\n3. Xem README.md ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt")
        else:
            print("üëã T·∫°m bi·ªát!")
    else:
        print("\n‚ùå H·ªá th·ªëng ch∆∞a s·∫µn s√†ng. Vui l√≤ng ki·ªÉm tra l·∫°i!")
        print("üí° H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:")
        if not opencv_ok:
            print("   - C√†i ƒë·∫∑t OpenCV: pip install opencv-python")
        if not camera_ok:
            print("   - Ki·ªÉm tra camera v√† quy·ªÅn truy c·∫≠p")

if __name__ == "__main__":
    main()
