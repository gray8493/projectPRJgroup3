#!/usr/bin/env python3
"""
Script ch·ª•p ·∫£nh nhanh v√† ph√¢n t√≠ch khu√¥n m·∫∑t
"""

import cv2
import os
from datetime import datetime

def capture_and_analyze():
    """Ch·ª•p ·∫£nh v√† ph√¢n t√≠ch ngay l·∫≠p t·ª©c"""
    print("üì∏ Ch·ª•p ·∫£nh v√† Ph√¢n t√≠ch Khu√¥n m·∫∑t")
    print("=" * 40)
    
    # Kh·ªüi t·∫°o camera
    cap = cv2.VideoCapture(0)
    
    if not cap.isOpened():
        print("‚ùå Kh√¥ng th·ªÉ m·ªü camera!")
        return
    
    # Load face detector
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    
    print("‚úÖ Camera v√† face detector ƒë√£ s·∫µn s√†ng!")
    print("üí° Nh·∫•n SPACE ƒë·ªÉ ch·ª•p ·∫£nh, ESC ƒë·ªÉ tho√°t")
    
    while True:
        ret, frame = cap.read()
        if not ret:
            break
        
        # Ph√°t hi·ªán khu√¥n m·∫∑t real-time
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, 1.1, 5, minSize=(50, 50))
        
        # V·∫Ω khung khu√¥n m·∫∑t
        display_frame = frame.copy()
        for (x, y, w, h) in faces:
            cv2.rectangle(display_frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
            cv2.putText(display_frame, f'Face {len(faces)}', (x, y-10), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
        
        # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
        cv2.putText(display_frame, f"Faces detected: {len(faces)}", (10, 30), 
                   cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
        cv2.putText(display_frame, "SPACE: Capture | ESC: Exit", (10, display_frame.shape[0] - 10), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
        
        cv2.imshow('Capture Photo', display_frame)
        
        key = cv2.waitKey(1) & 0xFF
        
        if key == 32:  # SPACE key
            # Ch·ª•p ·∫£nh
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"photo_{timestamp}.jpg"
            cv2.imwrite(filename, frame)
            
            print(f"\nüì∏ ƒê√£ ch·ª•p ·∫£nh: {filename}")
            
            # Ph√¢n t√≠ch ·∫£nh v·ª´a ch·ª•p
            analyze_photo(filename, face_cascade)
            
            # H·ªèi c√≥ mu·ªën ch·ª•p ti·∫øp kh√¥ng
            choice = input("\nüì∑ Ch·ª•p ·∫£nh kh√°c? (y/n): ").strip().lower()
            if choice != 'y':
                break
                
        elif key == 27:  # ESC key
            break
    
    cap.release()
    cv2.destroyAllWindows()

def analyze_photo(filename, face_cascade):
    """Ph√¢n t√≠ch chi ti·∫øt ·∫£nh ƒë√£ ch·ª•p"""
    print(f"\nüîç Ph√¢n t√≠ch ·∫£nh: {filename}")
    
    # ƒê·ªçc ·∫£nh
    image = cv2.imread(filename)
    if image is None:
        print("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh!")
        return
    
    # Ph√°t hi·ªán khu√¥n m·∫∑t
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, 1.1, 5, minSize=(50, 50))
    
    print(f"üë• S·ªë khu√¥n m·∫∑t ph√°t hi·ªán: {len(faces)}")
    
    if len(faces) == 0:
        print("‚ö†Ô∏è Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t n√†o!")
        return
    
    # Ph√¢n t√≠ch t·ª´ng khu√¥n m·∫∑t
    for i, (x, y, w, h) in enumerate(faces):
        print(f"\nüë§ Khu√¥n m·∫∑t {i+1}:")
        print(f"   üìè V·ªã tr√≠: ({x}, {y})")
        print(f"   üìê K√≠ch th∆∞·ªõc: {w}x{h} pixels")
        
        # C·∫Øt v√πng khu√¥n m·∫∑t
        face_region = image[y:y+h, x:x+w]
        
        # Ph√¢n t√≠ch c∆° b·∫£n
        face_area = w * h
        if face_area < 5000:
            size_category = "Nh·ªè (c√≥ th·ªÉ l√† tr·∫ª em)"
        elif face_area < 15000:
            size_category = "Trung b√¨nh"
        else:
            size_category = "L·ªõn (ng∆∞·ªùi l·ªõn)"
        
        print(f"   üìä Di·ªán t√≠ch: {face_area} pixels ({size_category})")
        
        # L∆∞u khu√¥n m·∫∑t ri√™ng
        face_filename = f"face_{i+1}_{datetime.now().strftime('%H%M%S')}.jpg"
        cv2.imwrite(face_filename, face_region)
        print(f"   üíæ ƒê√£ l∆∞u khu√¥n m·∫∑t: {face_filename}")
    
    # T·∫°o ·∫£nh k·∫øt qu·∫£ v·ªõi khung khu√¥n m·∫∑t
    result_image = image.copy()
    for i, (x, y, w, h) in enumerate(faces):
        cv2.rectangle(result_image, (x, y), (x+w, y+h), (0, 255, 0), 2)
        cv2.putText(result_image, f'Face {i+1}', (x, y-10), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
    
    # L∆∞u ·∫£nh k·∫øt qu·∫£
    result_filename = f"analyzed_{filename}"
    cv2.imwrite(result_filename, result_image)
    print(f"\n‚úÖ ƒê√£ l∆∞u ·∫£nh ph√¢n t√≠ch: {result_filename}")
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    print("\nüëÅÔ∏è Hi·ªÉn th·ªã k·∫øt qu·∫£ (nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ƒë√≥ng)...")
    cv2.imshow('Analysis Result', result_image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

def analyze_existing_photo():
    """Ph√¢n t√≠ch ·∫£nh c√≥ s·∫µn"""
    print("\nüìÅ Ph√¢n t√≠ch ·∫£nh c√≥ s·∫µn")
    
    # Li·ªát k√™ ·∫£nh trong th∆∞ m·ª•c
    image_files = []
    for file in os.listdir('.'):
        if file.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp')):
            image_files.append(file)
    
    if image_files:
        print("\nüì∑ ·∫¢nh c√≥ s·∫µn:")
        for i, file in enumerate(image_files):
            print(f"   {i+1}. {file}")
        
        try:
            choice = int(input(f"\nCh·ªçn ·∫£nh (1-{len(image_files)}): ")) - 1
            if 0 <= choice < len(image_files):
                filename = image_files[choice]
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
                return
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
            return
    else:
        filename = input("üì∑ Nh·∫≠p ƒë∆∞·ªùng d·∫´n ·∫£nh: ").strip()
    
    if not os.path.exists(filename):
        print("‚ùå File kh√¥ng t·ªìn t·∫°i!")
        return
    
    # Load face detector
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    
    # Ph√¢n t√≠ch
    analyze_photo(filename, face_cascade)

def main():
    print("üéØ Ch·ª•p ·∫£nh v√† Ph√¢n t√≠ch Khu√¥n m·∫∑t")
    print("=" * 50)
    
    while True:
        print("\nüìã Ch·ªçn ch·∫ø ƒë·ªô:")
        print("1. üì∏ Ch·ª•p ·∫£nh m·ªõi v√† ph√¢n t√≠ch")
        print("2. üìÅ Ph√¢n t√≠ch ·∫£nh c√≥ s·∫µn")
        print("3. ‚ùå Tho√°t")
        
        choice = input("\nüëâ Nh·∫≠p l·ª±a ch·ªçn (1-3): ").strip()
        
        if choice == '1':
            capture_and_analyze()
        elif choice == '2':
            analyze_existing_photo()
        elif choice == '3':
            print("üëã T·∫°m bi·ªát!")
            break
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

if __name__ == "__main__":
    main()
